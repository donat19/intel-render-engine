#!/usr/bin/env python3
"""
Level Editor Launcher

–õ–∞—É–Ω—á–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —É—Ä–æ–≤–Ω–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
"""

import sys
import os
import subprocess
import argparse

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Level Editor...")
    
    required_packages = [
        'imgui[glfw,opengl,pygame]',
        'PyOpenGL',
        'PyOpenGL_accelerate',
        'pygame',
        'numpy'
    ]
    
    missing_packages = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç
    for package in required_packages:
        package_name = package.split('[')[0]  # –£–±–∏—Ä–∞–µ–º extras –∏–∑ –∏–º–µ–Ω–∏
        try:
            if package_name == 'imgui':
                import imgui
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º pygame integration
                try:
                    from imgui.integrations.pygame import PygameRenderer
                except ImportError:
                    missing_packages.append(package)
            elif package_name == 'PyOpenGL':
                import OpenGL.GL
            elif package_name == 'PyOpenGL_accelerate':
                try:
                    import OpenGL_accelerate
                except ImportError:
                    pass  # –≠—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç
            elif package_name == 'pygame':
                import pygame
            elif package_name == 'numpy':
                import numpy
                
        except ImportError:
            missing_packages.append(package)
            
    if missing_packages:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        
        for package in missing_packages:
            try:
                print(f"   –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
                subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
                print(f"   ‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.CalledProcessError as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}")
                return False
                
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    else:
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    return True

def check_opengl_support():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ OpenGL"""
    try:
        import pygame
        pygame.init()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Å OpenGL –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        pygame.display.set_mode((100, 100), pygame.OPENGL | pygame.HIDDEN)
        
        import OpenGL.GL as gl
        version = gl.glGetString(gl.GL_VERSION)
        renderer = gl.glGetString(gl.GL_RENDERER)
        
        pygame.quit()
        
        print(f"üéÆ OpenGL –≤–µ—Ä—Å–∏—è: {version.decode()}")
        print(f"üéÆ –†–µ–Ω–¥–µ—Ä–µ—Ä: {renderer.decode()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ OpenGL: {e}")
        return False

def launch_level_editor(debug=False):
    """–ó–∞–ø—É—Å–∫ Level Editor"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Intel Render Engine - Level Editor")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
    current_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.abspath(os.path.join(current_dir, '..', '..'))
    
    sys.path.insert(0, project_root)
    sys.path.insert(0, os.path.join(project_root, 'src'))
    
    try:
        if debug:
            print("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")
            
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Level Editor
        from src.level_editor.level_editor import LevelEditor
        
        print("‚ú® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Level Editor...")
        editor = LevelEditor()
        
        print("üéØ Level Editor –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
        print("   F12 - –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å ImGui Demo")
        print("   Tab - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
        print("   –ú–µ–Ω—é File -> Exit –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print()
        
        editor.run()
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Level Editor: {e}")
        if debug:
            import traceback
            traceback.print_exc()
        return False
        
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–∞—É–Ω—á–µ—Ä–∞"""
    parser = argparse.ArgumentParser(
        description='Level Editor Launcher –¥–ª—è Intel Render Engine',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python level_editor_launcher.py                # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
  python level_editor_launcher.py --debug        # –ó–∞–ø—É—Å–∫ —Å –æ—Ç–ª–∞–¥–∫–æ–π
  python level_editor_launcher.py --check-deps   # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  python level_editor_launcher.py --force-install # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞

Level Editor Features:
  üé® –ú–æ–¥—É–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Å—Ç–∏–ª–µ Blender
  üèóÔ∏è –°–∏—Å—Ç–µ–º–∞ –æ–±–ª–∞—Å—Ç–µ–π (Areas) —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º–∏
  üëÄ 3D Viewport —Å real-time raymarching
  üìÅ Outliner –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–µ–π —Å—Ü–µ–Ω—ã
  ‚öôÔ∏è Properties editor –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  üé¨ HDR —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        """
    )
    
    parser.add_argument('--debug', action='store_true',
                       help='–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏')
    parser.add_argument('--check-deps', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏')
    parser.add_argument('--force-install', action='store_true',
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏')
    parser.add_argument('--skip-opengl-check', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É OpenGL')
    
    args = parser.parse_args()
    
    print("üèóÔ∏è Intel Render Engine - Level Editor Launcher")
    print("=" * 50)
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if args.force_install:
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        required_packages = [
            'imgui[glfw,opengl,pygame]',
            'PyOpenGL',
            'PyOpenGL_accelerate', 
            'pygame',
            'numpy'
        ]
        
        for package in required_packages:
            try:
                print(f"   –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
                subprocess.check_call([
                    sys.executable, '-m', 'pip', 'install', 
                    '--upgrade', '--force-reinstall', package
                ])
            except subprocess.CalledProcessError as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}")
        
        print("‚úÖ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        sys.exit(1)
        
    if args.check_deps:
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        sys.exit(0)
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenGL
    if not args.skip_opengl_check:
        if not check_opengl_support():
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OpenGL")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å --skip-opengl-check")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø—É—Å–∫? (y/N): ")
            if response.lower() != 'y':
                sys.exit(1)
                
    # –ó–∞–ø—É—Å–∫ Level Editor
    success = launch_level_editor(debug=args.debug)
    
    if success:
        print("üëã Level Editor –∑–∞–≤–µ—Ä—à–µ–Ω")
    else:
        print("‚ùå Level Editor –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π")
        sys.exit(1)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–∞—É–Ω—á–µ—Ä–∞: {e}")
        sys.exit(1)
