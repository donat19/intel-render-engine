#!/usr/bin/env python3
"""
Level Editor —Å OpenCL GUI - –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ ImGui

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é OpenCL GUI —Å–∏—Å—Ç–µ–º—É –≤–º–µ—Å—Ç–æ ImGui.
–í—Å—è GUI —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –Ω–∞ GPU –∫–∞–∫ —á–∞—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–∞–π–ø–ª–∞–π–Ω–∞.
"""
import pygame
import numpy as np
import time
import os
import sys
from typing import Optional, Dict, Any, Callable

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.insert(0, project_root)
sys.path.insert(0, os.path.join(project_root, 'src'))

from src.gui.opencl_gui import (
    OpenCLGUI, GUITheme, Button, Text, Panel, Slider,
    create_main_menu, create_fps_display, create_camera_info_panel, 
    create_render_settings_panel, Color, Rect
)
from src.core.raymarcher import RayMarcher

class OpenCLLevelEditor:
    """Level Editor —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é OpenCL GUI —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self, width: int = 1400, height: int = 900):
        self.width = width
        self.height = height
        self.running = True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
        self._init_pygame()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Raymarcher (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä)
        self._init_raymarcher()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenCL GUI —Å–∏—Å—Ç–µ–º—ã
        self._init_opencl_gui()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self._create_ui_elements()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.last_frame_time = time.time()
        self.fps_counter = 0
        self.fps_display_timer = 0.0
        self.current_fps = 60.0
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∏ —Ä–µ–Ω–¥–µ—Ä–∞ –¥–ª—è GUI
        self.camera_info_dirty = True
        self.render_settings_dirty = True
        
        print("üé® OpenCL Level Editor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}")
        print(f"üé¨ Raymarcher: –≥–æ—Ç–æ–≤")
        print(f"üñ•Ô∏è OpenCL GUI: –≥–æ—Ç–æ–≤")
    
    def _init_pygame(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame"""
        pygame.init()
        self.screen = pygame.display.set_mode((self.width, self.height), pygame.RESIZABLE)
        pygame.display.set_caption("Intel Render Engine - Level Editor (OpenCL GUI)")
        self.clock = pygame.time.Clock()
        
        # –ö–ª–∞–≤–∏—à–∏ –∏ –º—ã—à—å
        self.keys_pressed = set()
        self.mouse_pos = (0, 0)
        self.mouse_buttons = [False, False, False]
        
    def _init_raymarcher(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Raymarcher"""
        try:
            self.raymarcher = RayMarcher(self.width, self.height, scene_name='demo', enable_hdr=True)
            print("‚úÖ Raymarcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Raymarcher: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ raymarcher.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            self.raymarcher = None
    
    def _init_opencl_gui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenCL GUI —Å–∏—Å—Ç–µ–º—ã"""
        if self.raymarcher:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ OpenCL –∫–æ–Ω—Ç–µ–∫—Å—Ç —á—Ç–æ –∏ raymarcher
                self.gui = OpenCLGUI(
                    cl_context=self.raymarcher.context,
                    cl_queue=self.raymarcher.queue,
                    width=self.width,
                    height=self.height,
                    theme=GUITheme.BLENDER
                )
                print("‚úÖ OpenCL GUI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenCL GUI: {e}")
                self.gui = None
        else:
            print("‚ùå OpenCL GUI –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ–∑ Raymarcher")
            self.gui = None
    
    def _create_ui_elements(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if not self.gui:
            return
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self._create_main_menu()
        
        # –ü–∞–Ω–µ–ª—å FPS
        self._create_fps_panel()
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–µ—Ä–µ
        self._create_camera_panel()
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–Ω–¥–µ—Ä–∞
        self._create_render_panel()
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self._create_tools_panel()
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self._create_status_bar()
        
        print("üéõÔ∏è UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    def _create_main_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        # –§–æ–Ω –º–µ–Ω—é
        menu_bg = self.gui.create_panel("menu_bg", 0, 0, self.width, 30, "")
        menu_bg.colors['normal'] = Color(0.1, 0.1, 0.1, 0.95)
        
        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        self.gui.create_button("menu_file", 10, 5, 60, 20, "File", 
                              on_click=self._on_menu_file_click)
        self.gui.create_button("menu_edit", 80, 5, 60, 20, "Edit",
                              on_click=self._on_menu_edit_click)
        self.gui.create_button("menu_scene", 150, 5, 80, 20, "Scene",
                              on_click=self._on_menu_scene_click)
        self.gui.create_button("menu_render", 240, 5, 80, 20, "Render",
                              on_click=self._on_menu_render_click)
        self.gui.create_button("menu_help", 330, 5, 60, 20, "Help",
                              on_click=self._on_menu_help_click)
    
    def _create_fps_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ FPS"""
        # –§–æ–Ω –ø–∞–Ω–µ–ª–∏
        fps_bg = self.gui.create_panel("fps_bg", self.width - 200, 35, 195, 60, "Performance")
        fps_bg.colors['normal'] = Color(0.05, 0.05, 0.05, 0.9)
        
        # –¢–µ–∫—Å—Ç FPS
        self.fps_text = self.gui.create_text("fps_text", self.width - 190, 55, "FPS: 60.0")
        self.fps_text.colors['text'] = Color(0.0, 1.0, 0.0, 1.0)
        
        # –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∞
        self.render_time_text = self.gui.create_text("render_time", self.width - 190, 75, "Render: 16.7ms")
        self.render_time_text.colors['text'] = Color(0.0, 0.8, 1.0, 1.0)
    
    def _create_camera_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–µ—Ä–µ"""
        # –§–æ–Ω –ø–∞–Ω–µ–ª–∏
        cam_bg = self.gui.create_panel("camera_bg", 10, 35, 280, 140, "Camera")
        cam_bg.colors['normal'] = Color(0.05, 0.05, 0.05, 0.9)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏
        self.camera_pos_text = self.gui.create_text("camera_pos", 20, 55, "Position: 0.0, 0.0, 5.0")
        self.camera_pos_text.colors['text'] = Color(0.9, 0.9, 0.9, 1.0)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–≥–ª–∞—Ö
        self.camera_angles_text = self.gui.create_text("camera_angles", 20, 75, "Angles: 0.0¬∞, 0.0¬∞, 0.0¬∞")
        self.camera_angles_text.colors['text'] = Color(0.9, 0.9, 0.9, 1.0)
        
        # –°–∫–æ—Ä–æ—Å—Ç—å –∫–∞–º–µ—Ä—ã
        self.gui.create_text("camera_speed_label", 20, 95, "Speed:")
        self.camera_speed_slider = self.gui.create_slider("camera_speed", 70, 95, 150, 20, 0.1, 10.0, 1.0,
                                                         on_change=self._on_camera_speed_change)
        self.camera_speed_text = self.gui.create_text("camera_speed_value", 230, 95, "1.0")
        
        # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—ã—à–∏
        self.gui.create_text("mouse_sens_label", 20, 120, "Mouse:")
        self.mouse_sens_slider = self.gui.create_slider("mouse_sens", 70, 120, 150, 20, 0.001, 0.01, 0.005,
                                                       on_change=self._on_mouse_sens_change)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞–º–µ—Ä—ã
        self.gui.create_button("reset_camera", 20, 145, 80, 25, "Reset Cam",
                              on_click=self._on_reset_camera_click)
    
    def _create_render_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–Ω–¥–µ—Ä–∞"""
        # –§–æ–Ω –ø–∞–Ω–µ–ª–∏
        render_bg = self.gui.create_panel("render_bg", 300, 35, 250, 200, "Render Settings")
        render_bg.colors['normal'] = Color(0.05, 0.05, 0.05, 0.9)
        
        # HDR –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.gui.create_text("hdr_label", 310, 55, "HDR Settings")
        
        # Exposure
        self.gui.create_text("exposure_label", 310, 75, "Exposure:")
        self.exposure_slider = self.gui.create_slider("exposure", 380, 75, 120, 20, 0.1, 5.0, 1.0,
                                                    on_change=self._on_exposure_change)
        self.exposure_text = self.gui.create_text("exposure_value", 510, 75, "1.0")
        
        # Gamma
        self.gui.create_text("gamma_label", 310, 100, "Gamma:")
        self.gamma_slider = self.gui.create_slider("gamma", 380, 100, 120, 20, 1.0, 3.0, 2.2,
                                                 on_change=self._on_gamma_change)
        self.gamma_text = self.gui.create_text("gamma_value", 510, 100, "2.2")
        
        # Tone Mapping –∫–Ω–æ–ø–∫–∏
        self.gui.create_text("tone_mapping_label", 310, 125, "Tone Mapping:")
        self.gui.create_button("tm_linear", 310, 145, 50, 25, "Linear",
                              on_click=lambda btn: self._set_tone_mapping('linear'))
        self.gui.create_button("tm_reinhard", 365, 145, 50, 25, "Reinh",
                              on_click=lambda btn: self._set_tone_mapping('reinhard'))
        self.gui.create_button("tm_filmic", 420, 145, 50, 25, "Filmic",
                              on_click=lambda btn: self._set_tone_mapping('filmic'))
        self.gui.create_button("tm_aces", 475, 145, 50, 25, "ACES",
                              on_click=lambda btn: self._set_tone_mapping('aces'))
        
        # –°—Ü–µ–Ω—ã
        self.gui.create_text("scene_label", 310, 175, "Scene:")
        self.gui.create_button("scene_demo", 310, 195, 50, 25, "Demo",
                              on_click=lambda btn: self._switch_scene('demo'))
        self.gui.create_button("scene_clouds", 365, 195, 50, 25, "Clouds",
                              on_click=lambda btn: self._switch_scene('clouds'))
        self.gui.create_button("scene_adv_clouds", 420, 195, 80, 25, "Adv Clouds",
                              on_click=lambda btn: self._switch_scene('advanced_clouds'))
    
    def _create_tools_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        # –§–æ–Ω –ø–∞–Ω–µ–ª–∏
        tools_bg = self.gui.create_panel("tools_bg", self.width - 200, 100, 195, 200, "Tools")
        tools_bg.colors['normal'] = Color(0.05, 0.05, 0.05, 0.9)
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        self.gui.create_button("tool_select", self.width - 190, 120, 80, 30, "Select",
                              on_click=self._on_tool_select_click)
        self.gui.create_button("tool_move", self.width - 100, 120, 80, 30, "Move",
                              on_click=self._on_tool_move_click)
        
        self.gui.create_button("tool_rotate", self.width - 190, 155, 80, 30, "Rotate",
                              on_click=self._on_tool_rotate_click)
        self.gui.create_button("tool_scale", self.width - 100, 155, 80, 30, "Scale",
                              on_click=self._on_tool_scale_click)
        
        # –†–µ–∂–∏–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.gui.create_text("display_label", self.width - 190, 195, "Display Mode:")
        self.gui.create_button("display_solid", self.width - 190, 215, 60, 25, "Solid",
                              on_click=self._on_display_solid_click)
        self.gui.create_button("display_wireframe", self.width - 125, 215, 60, 25, "Wire",
                              on_click=self._on_display_wireframe_click)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GUI
        self.gui.create_text("gui_label", self.width - 190, 250, "GUI Theme:")
        self.gui.create_button("theme_dark", self.width - 190, 270, 45, 25, "Dark",
                              on_click=lambda btn: self._set_theme(GUITheme.DARK))
        self.gui.create_button("theme_light", self.width - 140, 270, 45, 25, "Light",
                              on_click=lambda btn: self._set_theme(GUITheme.LIGHT))
        self.gui.create_button("theme_cyber", self.width - 90, 270, 45, 25, "Cyber",
                              on_click=lambda btn: self._set_theme(GUITheme.CYBERPUNK))
    
    def _create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        # –§–æ–Ω —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        status_bg = self.gui.create_panel("status_bg", 0, self.height - 25, self.width, 25, "")
        status_bg.colors['normal'] = Color(0.08, 0.08, 0.08, 0.95)
        
        # –°—Ç–∞—Ç—É—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
        self.status_text = self.gui.create_text("status_text", 10, self.height - 20, "Ready | OpenCL GUI Active")
        self.status_text.colors['text'] = Color(0.7, 0.7, 0.7, 1.0)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        self.version_text = self.gui.create_text("version_text", self.width - 200, self.height - 20, 
                                               "Intel Render Engine v2.0")
        self.version_text.colors['text'] = Color(0.5, 0.5, 0.5, 1.0)
    
    # Callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è GUI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    def _on_menu_file_click(self, button: Button):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –º–µ–Ω—é File"""
        print("üìÅ File menu clicked")
        self._update_status("File menu opened")
    
    def _on_menu_edit_click(self, button: Button):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –º–µ–Ω—é Edit"""
        print("‚úèÔ∏è Edit menu clicked")
        self._update_status("Edit menu opened")
    
    def _on_menu_scene_click(self, button: Button):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –º–µ–Ω—é Scene"""
        print("üé¨ Scene menu clicked")
        self._update_status("Scene menu opened")
    
    def _on_menu_render_click(self, button: Button):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –º–µ–Ω—é Render"""
        print("üé® Render menu clicked")
        self._update_status("Render menu opened")
    
    def _on_menu_help_click(self, button: Button):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –º–µ–Ω—é Help"""
        print("‚ùì Help menu clicked")
        self._update_status("Help: WASD - move, Mouse - look, F11 - fullscreen")
    
    def _on_camera_speed_change(self, slider: Slider):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã"""
        if self.raymarcher:
            self.raymarcher.set_camera_speed(slider.value)
            self.camera_speed_text.text = f"{slider.value:.1f}"
            print(f"üì∑ Camera speed: {slider.value:.1f}")
    
    def _on_mouse_sens_change(self, slider: Slider):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º—ã—à–∏"""
        if self.raymarcher:
            self.raymarcher.set_mouse_sensitivity(slider.value)
            print(f"üñ±Ô∏è Mouse sensitivity: {slider.value:.3f}")
    
    def _on_reset_camera_click(self, button: Button):
        """–°–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã"""
        if self.raymarcher:
            self.raymarcher.reset_camera()
            self._update_status("Camera reset to default position")
            print("üì∑ Camera reset")
    
    def _on_exposure_change(self, slider: Slider):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ exposure"""
        if self.raymarcher:
            self.raymarcher.set_exposure(slider.value)
            self.exposure_text.text = f"{slider.value:.2f}"
            print(f"üí° Exposure: {slider.value:.2f}")
    
    def _on_gamma_change(self, slider: Slider):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ gamma"""
        if self.raymarcher:
            self.raymarcher.set_gamma(slider.value)
            self.gamma_text.text = f"{slider.value:.2f}"
            print(f"üéõÔ∏è Gamma: {slider.value:.2f}")
    
    def _set_tone_mapping(self, mode: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ tone mapping"""
        if self.raymarcher:
            self.raymarcher.set_tone_mapping(mode)
            self._update_status(f"Tone mapping: {mode}")
            print(f"üé® Tone mapping: {mode}")
    
    def _switch_scene(self, scene_name: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã"""
        if self.raymarcher:
            self.raymarcher.switch_scene(scene_name)
            self._update_status(f"Switched to scene: {scene_name}")
            print(f"üé¨ Scene: {scene_name}")
    
    def _on_tool_select_click(self, button: Button):
        """–í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Select"""
        self._update_status("Tool: Select")
        print("üéØ Tool: Select")
    
    def _on_tool_move_click(self, button: Button):
        """–í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Move"""
        self._update_status("Tool: Move")
        print("üìê Tool: Move")
    
    def _on_tool_rotate_click(self, button: Button):
        """–í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Rotate"""
        self._update_status("Tool: Rotate")
        print("üîÑ Tool: Rotate")
    
    def _on_tool_scale_click(self, button: Button):
        """–í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Scale"""
        self._update_status("Tool: Scale")
        print("üìè Tool: Scale")
    
    def _on_display_solid_click(self, button: Button):
        """–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Solid"""
        self._update_status("Display: Solid")
        print("üé® Display: Solid")
    
    def _on_display_wireframe_click(self, button: Button):
        """–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Wireframe"""
        self._update_status("Display: Wireframe")
        print("üìê Display: Wireframe")
    
    def _set_theme(self, theme: GUITheme):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã GUI"""
        if self.gui:
            self.gui.set_theme(theme)
            self._update_status(f"Theme: {theme.value}")
            print(f"üé® Theme: {theme.value}")
    
    def _update_status(self, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        if hasattr(self, 'status_text'):
            self.status_text.text = message
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ OpenCL Level Editor...")
        
        last_fps_update = time.time()
        frame_count = 0
        
        while self.running:
            current_time = time.time()
            delta_time = current_time - self.last_frame_time
            self.last_frame_time = current_time
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
            self._handle_events()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self._update(delta_time)
            
            # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
            render_time = self._render()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPS
            frame_count += 1
            if current_time - last_fps_update >= 1.0:
                self.current_fps = frame_count / (current_time - last_fps_update)
                frame_count = 0
                last_fps_update = current_time
                
                # –û–±–Ω–æ–≤–ª—è–µ–º GUI —ç–ª–µ–º–µ–Ω—Ç—ã —Å FPS
                if hasattr(self, 'fps_text'):
                    self.fps_text.text = f"FPS: {self.current_fps:.1f}"
                if hasattr(self, 'render_time_text'):
                    self.render_time_text.text = f"Render: {render_time*1000:.1f}ms"
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ FPS
            self.clock.tick(120)  # –ú–∞–∫—Å–∏–º—É–º 120 FPS
        
        print("üëã OpenCL Level Editor –∑–∞–≤–µ—Ä—à–µ–Ω")
        self._cleanup()
    
    def _handle_events(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Pygame"""
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            
            elif event.type == pygame.KEYDOWN:
                self.keys_pressed.add(event.key)
                
                # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
                if event.key == pygame.K_ESCAPE:
                    self.running = False
                elif event.key == pygame.K_F11:
                    self._toggle_fullscreen()
                elif event.key == pygame.K_F1:
                    self._toggle_help()
                
                # –ü–µ—Ä–µ–¥–∞–µ–º –≤ GUI
                if self.gui:
                    self.gui.handle_keyboard_event(event.key, True)
            
            elif event.type == pygame.KEYUP:
                self.keys_pressed.discard(event.key)
                if self.gui:
                    self.gui.handle_keyboard_event(event.key, False)
            
            elif event.type == pygame.MOUSEBUTTONDOWN:
                self.mouse_buttons[event.button - 1] = True
                if self.gui:
                    self.gui.handle_mouse_event(event.pos[0], event.pos[1], event.button - 1, True)
            
            elif event.type == pygame.MOUSEBUTTONUP:
                self.mouse_buttons[event.button - 1] = False
                if self.gui:
                    self.gui.handle_mouse_event(event.pos[0], event.pos[1], event.button - 1, False)
            
            elif event.type == pygame.MOUSEMOTION:
                self.mouse_pos = event.pos
                if self.gui:
                    self.gui.handle_mouse_event(event.pos[0], event.pos[1], -1, False)
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π –º—ã—à—å—é (–µ—Å–ª–∏ –Ω–µ—Ç —Ñ–æ–∫—É—Å–∞ –Ω–∞ GUI)
                if pygame.mouse.get_pressed()[0] and self.raymarcher:
                    rel_x, rel_y = event.rel
                    if abs(rel_x) > 0 or abs(rel_y) > 0:
                        self.raymarcher.handle_mouse_movement(rel_x * 0.005, rel_y * 0.005)
            
            elif event.type == pygame.VIDEORESIZE:
                self._handle_resize(event.w, event.h)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
        self._handle_camera_movement()
    
    def _handle_camera_movement(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –∫–ª–∞–≤–∏—à–∞–º–∏"""
        if not self.raymarcher:
            return
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        if pygame.K_w in self.keys_pressed:
            self.raymarcher.move_camera('forward')
        if pygame.K_s in self.keys_pressed:
            self.raymarcher.move_camera('backward')
        if pygame.K_a in self.keys_pressed:
            self.raymarcher.move_camera('left')
        if pygame.K_d in self.keys_pressed:
            self.raymarcher.move_camera('right')
        if pygame.K_q in self.keys_pressed:
            self.raymarcher.move_camera('down')
        if pygame.K_e in self.keys_pressed:
            self.raymarcher.move_camera('up')
        
        # –ü–æ–≤–æ—Ä–æ—Ç –∫–∞–º–µ—Ä—ã —Å—Ç—Ä–µ–ª–∫–∞–º–∏
        if pygame.K_LEFT in self.keys_pressed:
            self.raymarcher.rotate_camera(0, -0.02, 0)
        if pygame.K_RIGHT in self.keys_pressed:
            self.raymarcher.rotate_camera(0, 0.02, 0)
        if pygame.K_UP in self.keys_pressed:
            self.raymarcher.rotate_camera(-0.02, 0, 0)
        if pygame.K_DOWN in self.keys_pressed:
            self.raymarcher.rotate_camera(0.02, 0, 0)
    
    def _handle_resize(self, width: int, height: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        self.width = width
        self.height = height
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Pygame –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
        self.screen = pygame.display.set_mode((width, height), pygame.RESIZABLE)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Raymarcher
        if self.raymarcher:
            self.raymarcher.resize(width, height)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º GUI
        if self.gui:
            self.gui.resize(width, height)
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            self._recreate_ui_for_new_size()
        
        print(f"üìê Resized to: {width}x{height}")
    
    def _recreate_ui_for_new_size(self):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫—Ä–∞—è–º —ç–∫—Ä–∞–Ω–∞
        if hasattr(self, 'fps_text'):
            self.fps_text.rect.x = self.width - 190
        if hasattr(self, 'render_time_text'):
            self.render_time_text.rect.x = self.width - 190
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        if hasattr(self, 'status_text'):
            self.status_text.rect.y = self.height - 20
        if hasattr(self, 'version_text'):
            self.version_text.rect.x = self.width - 200
            self.version_text.rect.y = self.height - 20
    
    def _toggle_fullscreen(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        print("üñ•Ô∏è Fullscreen toggle requested")
    
    def _toggle_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        print("‚ùì Help toggle requested")
    
    def _update(self, delta_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û–±–Ω–æ–≤–ª—è–µ–º GUI
        if self.gui:
            self.gui.update(delta_time)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–µ –≤ GUI
        if self.raymarcher and hasattr(self, 'camera_pos_text'):
            camera_info = self.raymarcher.get_camera_info()
            pos = camera_info['position']
            angles = camera_info.get('angles', [0, 0, 0])
            
            self.camera_pos_text.text = f"Position: {pos[0]:.2f}, {pos[1]:.2f}, {pos[2]:.2f}"
            self.camera_angles_text.text = f"Angles: {np.degrees(angles[0]):.1f}¬∞, {np.degrees(angles[1]):.1f}¬∞, {np.degrees(angles[2]):.1f}¬∞"
    
    def _render(self) -> float:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–¥—Ä–∞"""
        start_time = time.time()
        
        try:
            if self.raymarcher:
                # –†–µ–Ω–¥–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ü–µ–Ω—É
                image_array = self.raymarcher.render()
                
                # –†–µ–Ω–¥–µ—Ä–∏–º GUI –ø–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω—ã
                if self.gui:
                    self.gui.render_to_buffer(self.raymarcher.output_buffer)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ pygame –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
                rgb_array = image_array[:, :, :3]  # –£–±–∏—Ä–∞–µ–º alpha –∫–∞–Ω–∞–ª
                surface = pygame.surfarray.make_surface(rgb_array.swapaxes(0, 1))
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                self.screen.blit(surface, (0, 0))
            else:
                # Fallback - —á–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º
                self.screen.fill((0, 0, 0))
                font = pygame.font.Font(None, 36)
                text = font.render("Raymarcher –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", True, (255, 0, 0))
                self.screen.blit(text, (50, 50))
                
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            self.screen.fill((50, 0, 0))
            font = pygame.font.Font(None, 24)
            error_text = font.render(f"Render Error: {str(e)[:60]}...", True, (255, 255, 255))
            self.screen.blit(error_text, (10, 10))
            print(f"‚ùå Render error: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
        pygame.display.flip()
        
        render_time = time.time() - start_time
        return render_time
    
    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.gui:
            self.gui.cleanup()
        if self.raymarcher:
            self.raymarcher.cleanup()
        pygame.quit()

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ Level Editor"""
    print("üèóÔ∏è Intel Render Engine - Level Editor (OpenCL GUI)")
    print("=" * 60)
    
    try:
        editor = OpenCLLevelEditor(width=1400, height=900)
        editor.run()
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
