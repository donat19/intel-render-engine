#!/usr/bin/env python3
"""
OpenCL Level Editor Launcher

–õ–∞—É–Ω—á–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Level Editor —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é OpenCL GUI —Å–∏—Å—Ç–µ–º–æ–π.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
"""
import sys
import os
import argparse
import subprocess
import time
from typing import List, Dict, Any

def check_dependencies() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π OpenCL Level Editor...")
    
    required_packages = [
        'pyopencl',
        'numpy', 
        'pygame',
        'Pillow'
    ]
    
    missing_packages = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç
    for package in required_packages:
        try:
            if package == 'pyopencl':
                import pyopencl
                print(f"‚úÖ {package}: {pyopencl.get_platforms()}")
            elif package == 'numpy':
                import numpy
                print(f"‚úÖ {package}: {numpy.__version__}")
            elif package == 'pygame':
                import pygame
                pygame.init()
                print(f"‚úÖ {package}: {pygame.version.ver}")
                pygame.quit()
            elif package == 'Pillow':
                from PIL import Image
                print(f"‚úÖ {package}: available")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if missing_packages:
        print(f"\nüì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        
        for package in missing_packages:
            try:
                print(f"üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
                subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
                print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}")
                return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤—ã")
    return True

def check_opencl_support() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ OpenCL"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ OpenCL...")
    
    try:
        import pyopencl as cl
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        platforms = cl.get_platforms()
        if not platforms:
            print("‚ùå OpenCL –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ OpenCL –ø–ª–∞—Ç—Ñ–æ—Ä–º: {len(platforms)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        total_devices = 0
        for i, platform in enumerate(platforms):
            try:
                devices = platform.get_devices()
                device_count = len(devices)
                total_devices += device_count
                
                print(f"  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ {i+1}: {platform.name.strip()} ({device_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤)")
                
                for j, device in enumerate(devices):
                    device_type = "GPU" if device.type & cl.device_type.GPU else "CPU"
                    print(f"    –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {j+1}: {device.name.strip()} ({device_type})")
                    
            except Exception as e:
                print(f"  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ {i+1}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - {e}")
        
        if total_devices == 0:
            print("‚ùå OpenCL —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        try:
            context = cl.create_some_context(interactive=False)
            queue = cl.CommandQueue(context)
            print("‚úÖ OpenCL –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OpenCL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return False
            
    except ImportError:
        print("‚ùå PyOpenCL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenCL: {e}")
        return False

def check_gui_files() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ GUI"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ OpenCL GUI...")
    
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    required_files = [
        'opencl_level_editor.py',
        'src/gui/opencl_gui.py',
        'shaders/gui.cl',
        'src/core/raymarcher.py'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        full_path = os.path.join(current_dir, file_path)
        if os.path.exists(full_path):
            print(f"‚úÖ {file_path}")
        else:
            missing_files.append(file_path)
            print(f"‚ùå {file_path}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directories_to_create = [
            'src/gui',
            'src/core', 
            'shaders'
        ]
        
        for dir_path in directories_to_create:
            full_dir_path = os.path.join(current_dir, dir_path)
            if not os.path.exists(full_dir_path):
                try:
                    os.makedirs(full_dir_path, exist_ok=True)
                    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dir_path}: {e}")
        
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

def setup_python_path():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –ø—É—Ç–µ–π"""
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    paths_to_add = [
        current_dir,
        os.path.join(current_dir, 'src'),
        os.path.join(current_dir, 'src', 'core'),
        os.path.join(current_dir, 'src', 'gui')
    ]
    
    for path in paths_to_add:
        if path not in sys.path:
            sys.path.insert(0, path)
    
    print(f"üêç Python paths –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {len(paths_to_add)} –ø—É—Ç–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ")

def launch_opencl_level_editor(debug: bool = False, theme: str = "blender") -> bool:
    """–ó–∞–ø—É—Å–∫ OpenCL Level Editor"""
    print("üöÄ –ó–∞–ø—É—Å–∫ OpenCL Level Editor...")
    
    setup_python_path()
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Level Editor
        from opencl_level_editor import OpenCLLevelEditor, GUITheme
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É
        theme_map = {
            'dark': GUITheme.DARK,
            'light': GUITheme.LIGHT,
            'blender': GUITheme.BLENDER,
            'cyberpunk': GUITheme.CYBERPUNK
        }
        
        selected_theme = theme_map.get(theme.lower(), GUITheme.BLENDER)
        
        print(f"üé® –¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {selected_theme.value}")
        print(f"üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–≤–∫–ª—é—á–µ–Ω' if debug else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
        editor = OpenCLLevelEditor(width=1400, height=900)
        if editor.gui:
            editor.gui.set_theme(selected_theme)
            print(f"üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ç–µ–º–∞: {selected_theme.value}")
        
        print("\n" + "="*60)
        print("üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
        print("  WASD - –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã")
        print("  –ú—ã—à—å - –ø–æ–≤–æ—Ä–æ—Ç –∫–∞–º–µ—Ä—ã (–ø—Ä–∏ –∑–∞–∂–∞—Ç–æ–π –õ–ö–ú)")
        print("  –°—Ç—Ä–µ–ª–∫–∏ - –ø–æ–≤–æ—Ä–æ—Ç –∫–∞–º–µ—Ä—ã")
        print("  Q/E - –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑")
        print("  F11 - –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
        print("  F1 - —Å–ø—Ä–∞–≤–∫–∞")
        print("  ESC - –≤—ã—Ö–æ–¥")
        print("="*60)
        print("üéõÔ∏è GUI: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OpenCL GUI –ø–∞–Ω–µ–ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("üé¨ Raymarching —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ GPU —á–µ—Ä–µ–∑ OpenCL")
        print("‚ú® –í—Å–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –Ω–∞ GPU")
        print("="*60 + "\n")
        
        editor.run()
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        if debug:
            import traceback
            traceback.print_exc()
        return False

def run_system_info():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("üíª –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
    print("="*50)
    
    # Python info
    print(f"üêç Python: {sys.version}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # OpenCL info
    try:
        import pyopencl as cl
        platforms = cl.get_platforms()
        print(f"üîß OpenCL –ø–ª–∞—Ç—Ñ–æ—Ä–º: {len(platforms)}")
        
        for platform in platforms:
            try:
                devices = platform.get_devices()
                print(f"   {platform.name.strip()}: {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            except:
                print(f"   {platform.name.strip()}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    except:
        print("‚ùå OpenCL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # Memory info
    try:
        import psutil
        memory = psutil.virtual_memory()
        print(f"üíæ RAM: {memory.total // (1024**3)} GB (–¥–æ—Å—Ç—É–ø–Ω–æ: {memory.available // (1024**3)} GB)")
    except:
        print("üíæ RAM: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    print("="*50)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–∞—É–Ω—á–µ—Ä–∞"""
    parser = argparse.ArgumentParser(
        description='OpenCL Level Editor Launcher –¥–ª—è Intel Render Engine',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
  python opencl_level_editor_launcher.py                    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
  python opencl_level_editor_launcher.py --debug            # –° –æ—Ç–ª–∞–¥–∫–æ–π
  python opencl_level_editor_launcher.py --theme cyberpunk  # Cyberpunk —Ç–µ–º–∞
  python opencl_level_editor_launcher.py --check-only       # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
  python opencl_level_editor_launcher.py --system-info      # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ

–û–°–û–ë–ï–ù–ù–û–°–¢–ò OPENCL LEVEL EDITOR:
  üé® –ü–æ–ª–Ω–æ—Å—Ç—å—é GPU-—É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ OpenCL
  üöÄ –í—Å–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –Ω–∞ GPU 
  üé¨ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å raymarching –¥–≤–∏–∂–∫–æ–º
  üéõÔ∏è –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  ‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  üé≠ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  
–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
  ‚úÖ Python 3.8+
  ‚úÖ OpenCL 1.2+
  ‚úÖ GPU —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OpenCL (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
  ‚úÖ 4GB+ RAM
        """
    )
    
    parser.add_argument('--debug', action='store_true',
                       help='–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏')
    parser.add_argument('--theme', choices=['dark', 'light', 'blender', 'cyberpunk'],
                       default='blender', help='–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞')
    parser.add_argument('--check-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π')
    parser.add_argument('--system-info', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ')
    parser.add_argument('--force-install', action='store_true',
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π')
    
    args = parser.parse_args()
    
    print("üèóÔ∏è Intel Render Engine - OpenCL Level Editor Launcher")
    print("üé® –ü–æ–ª–Ω–æ—Å—Ç—å—é GPU-—É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ OpenCL")
    print("=" * 60)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    if args.system_info:
        run_system_info()
        return
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    if args.force_install:
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        packages = ['pyopencl', 'numpy', 'pygame', 'Pillow']
        for package in packages:
            try:
                subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', package])
                print(f"‚úÖ {package} –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenCL
    if not check_opencl_support():
        print("‚ùå OpenCL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("   - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥—Ä–∞–π–≤–µ—Ä—ã GPU")
        print("   - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OpenCL runtime")
        print("   - GPU –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OpenCL")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    if not check_gui_files():
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
        if not args.check_only:
            sys.exit(1)
    
    # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
    if args.check_only:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ Level Editor –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        return
    
    # –ó–∞–ø—É—Å–∫ Level Editor
    print("\nüé¨ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º Level Editor...")
    time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    
    success = launch_opencl_level_editor(debug=args.debug, theme=args.theme)
    
    if success:
        print("\nüëã OpenCL Level Editor –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ OpenCL Level Editor")
        sys.exit(1)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
