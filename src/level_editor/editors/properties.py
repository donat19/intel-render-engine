"""
Properties Editor - –†–µ–¥–∞–∫—Ç–æ—Ä —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–æ–≤

–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
–í–∫–ª—é—á–∞–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–≤–æ–π—Å—Ç–≤ (–æ–±—ä–µ–∫—Ç, –º–∞—Ç–µ—Ä–∏–∞–ª, –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ —Ç.–¥.).
"""

import imgui
from .base_editor import BaseEditor
from .outliner import SceneObject, ObjectType
from typing import Dict, Any, Optional, List
from enum import Enum
import numpy as np

class PropertyTab(Enum):
    """–í–∫–ª–∞–¥–∫–∏ —Å–≤–æ–π—Å—Ç–≤"""
    RENDER = "render"           # üé¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞
    SCENE = "scene"            # üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω—ã
    WORLD = "world"            # üåå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏—Ä–∞/–æ–∫—Ä—É–∂–µ–Ω–∏—è
    OBJECT = "object"          # üì¶ –°–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞
    MODIFIER = "modifier"      # üîß –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    MATERIAL = "material"      # üé® –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
    TEXTURE = "texture"        # üñºÔ∏è –¢–µ–∫—Å—Ç—É—Ä—ã
    PHYSICS = "physics"        # ‚öΩ –§–∏–∑–∏–∫–∞

class PropertiesEditor(BaseEditor):
    """–†–µ–¥–∞–∫—Ç–æ—Ä —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–æ–≤"""
    
    def __init__(self, editor_id: str = "properties"):
        super().__init__(editor_id)
        
        # –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
        self.active_tab = PropertyTab.OBJECT
        
        # –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        self.active_object: Optional[SceneObject] = None
        
        # –°–≤–æ–π—Å—Ç–≤–∞ —Ä–µ–Ω–¥–µ—Ä–∞
        self.render_settings = {
            'resolution_x': 1920,
            'resolution_y': 1080,
            'samples': 128,
            'max_bounces': 12,
            'use_hdr': True,
            'exposure': 1.0,
            'tone_mapping': 'filmic'
        }
        
        # –°–≤–æ–π—Å—Ç–≤–∞ —Å—Ü–µ–Ω—ã
        self.scene_settings = {
            'frame_start': 1,
            'frame_end': 250,
            'frame_current': 1,
            'fps': 24
        }
        
        # –°–≤–æ–π—Å—Ç–≤–∞ –º–∏—Ä–∞
        self.world_settings = {
            'background_color': [0.05, 0.05, 0.1],
            'ambient_strength': 0.1,
            'fog_enabled': False,
            'fog_density': 0.01
        }
        
    def set_active_object(self, obj: Optional[SceneObject]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç"""
        self.active_object = obj
        if obj:
            self.active_tab = PropertyTab.OBJECT
            
    def render_content(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–≤–æ–π—Å—Ç–≤"""
        # –í–∫–ª–∞–¥–∫–∏ —Å–≤–æ–π—Å—Ç–≤
        self._render_property_tabs()
        
        imgui.separator()
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        self._render_active_tab_content()
        
    def _render_property_tabs(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –≤–∫–ª–∞–¥–∫–∏ —Å–≤–æ–π—Å—Ç–≤"""
        tab_icons = {
            PropertyTab.RENDER: "üé¨",
            PropertyTab.SCENE: "üåç", 
            PropertyTab.WORLD: "üåå",
            PropertyTab.OBJECT: "üì¶",
            PropertyTab.MODIFIER: "üîß",
            PropertyTab.MATERIAL: "üé®",
            PropertyTab.TEXTURE: "üñºÔ∏è",
            PropertyTab.PHYSICS: "‚öΩ"
        }
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
        for i, (tab, icon) in enumerate(tab_icons.items()):
            if i > 0:
                imgui.same_line()
                
            is_active = tab == self.active_tab
            if is_active:
                imgui.push_style_color(imgui.COLOR_BUTTON, 0.2, 0.6, 0.8, 1.0)
                
            if imgui.button(f"{icon}##{tab.value}", width=30, height=30):
                self.active_tab = tab
                
            if is_active:
                imgui.pop_style_color()
                
            # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            if imgui.is_item_hovered():
                imgui.set_tooltip(tab.value.title())
                
    def _render_active_tab_content(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        if self.active_tab == PropertyTab.RENDER:
            self._render_render_properties()
        elif self.active_tab == PropertyTab.SCENE:
            self._render_scene_properties()
        elif self.active_tab == PropertyTab.WORLD:
            self._render_world_properties()
        elif self.active_tab == PropertyTab.OBJECT:
            self._render_object_properties()
        elif self.active_tab == PropertyTab.MODIFIER:
            self._render_modifier_properties()
        elif self.active_tab == PropertyTab.MATERIAL:
            self._render_material_properties()
        elif self.active_tab == PropertyTab.TEXTURE:
            self._render_texture_properties()
        elif self.active_tab == PropertyTab.PHYSICS:
            self._render_physics_properties()
            
    def _render_render_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞"""
        imgui.text("Render Settings")
        imgui.separator()
        
        if imgui.collapsing_header("Resolution", ):
            changed, self.render_settings['resolution_x'] = imgui.input_int(
                "Width", self.render_settings['resolution_x'], step=1)
            changed, self.render_settings['resolution_y'] = imgui.input_int(
                "Height", self.render_settings['resolution_y'], step=1)
                
        if imgui.collapsing_header("Quality", ):
            changed, self.render_settings['samples'] = imgui.slider_int(
                "Samples", self.render_settings['samples'], 1, 512)
            changed, self.render_settings['max_bounces'] = imgui.slider_int(
                "Max Bounces", self.render_settings['max_bounces'], 1, 32)
                
        if imgui.collapsing_header("HDR", ):
            changed, self.render_settings['use_hdr'] = imgui.checkbox(
                "Enable HDR", self.render_settings['use_hdr'])
            
            if self.render_settings['use_hdr']:
                changed, self.render_settings['exposure'] = imgui.slider_float(
                    "Exposure", self.render_settings['exposure'], 0.1, 5.0)
                    
                tone_mapping_modes = ['linear', 'reinhard', 'filmic', 'aces']
                current_mode = self.render_settings['tone_mapping']
                if imgui.begin_combo("Tone Mapping", current_mode):
                    for mode in tone_mapping_modes:
                        clicked, selected = imgui.selectable(mode, mode == current_mode)
                        if clicked:
                            self.render_settings['tone_mapping'] = mode
                    imgui.end_combo()
                    
    def _render_scene_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω—ã"""
        imgui.text("Scene Settings")
        imgui.separator()
        
        if imgui.collapsing_header("Animation", ):
            changed, self.scene_settings['frame_start'] = imgui.input_int(
                "Start Frame", self.scene_settings['frame_start'])
            changed, self.scene_settings['frame_end'] = imgui.input_int(
                "End Frame", self.scene_settings['frame_end'])
            changed, self.scene_settings['frame_current'] = imgui.slider_int(
                "Current Frame", self.scene_settings['frame_current'],
                self.scene_settings['frame_start'], self.scene_settings['frame_end'])
            changed, self.scene_settings['fps'] = imgui.input_int(
                "FPS", self.scene_settings['fps'])
                
    def _render_world_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏—Ä–∞"""
        imgui.text("World Settings")
        imgui.separator()
        
        if imgui.collapsing_header("Background", ):
            changed, self.world_settings['background_color'] = imgui.color_edit3(
                "Background Color", *self.world_settings['background_color'])
            changed, self.world_settings['ambient_strength'] = imgui.slider_float(
                "Ambient Strength", self.world_settings['ambient_strength'], 0.0, 1.0)
                
        if imgui.collapsing_header("Fog"):
            changed, self.world_settings['fog_enabled'] = imgui.checkbox(
                "Enable Fog", self.world_settings['fog_enabled'])
                
            if self.world_settings['fog_enabled']:
                changed, self.world_settings['fog_density'] = imgui.slider_float(
                    "Fog Density", self.world_settings['fog_density'], 0.001, 0.1)
                    
    def _render_object_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞"""
        if not self.active_object:
            imgui.text("No object selected")
            return
            
        imgui.text(f"Object: {self.active_object.name}")
        imgui.separator()
        
        # –û–±—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
        if imgui.collapsing_header("General", ):
            # –ò–º—è –æ–±—ä–µ–∫—Ç–∞
            if not hasattr(self.active_object, '_editing_name'):
                if imgui.button("Rename"):
                    self.active_object._editing_name = True
                    self.active_object._temp_name = self.active_object.name
            else:
                changed, self.active_object._temp_name = imgui.input_text(
                    "Name", self.active_object._temp_name)
                if imgui.button("OK"):
                    self.active_object.name = self.active_object._temp_name
                    delattr(self.active_object, '_editing_name')
                    delattr(self.active_object, '_temp_name')
                imgui.same_line()
                if imgui.button("Cancel"):
                    delattr(self.active_object, '_editing_name')
                    delattr(self.active_object, '_temp_name')
                    
            # –í–∏–¥–∏–º–æ—Å—Ç—å –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            changed, self.active_object.visible = imgui.checkbox(
                "Visible", self.active_object.visible)
            changed, self.active_object.locked = imgui.checkbox(
                "Locked", self.active_object.locked)
                
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
        if imgui.collapsing_header("Transform", ):
            self._render_transform_properties()
            
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å–≤–æ–π—Å—Ç–≤–∞
        self._render_type_specific_properties()
        
    def _render_transform_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º transform –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'transform' not in self.active_object.properties:
            self.active_object.properties['transform'] = {
                'location': [0.0, 0.0, 0.0],
                'rotation': [0.0, 0.0, 0.0],
                'scale': [1.0, 1.0, 1.0]
            }
            
        transform = self.active_object.properties['transform']
        
        # Location
        imgui.text("Location:")
        changed, transform['location'] = imgui.input_float3("##location", *transform['location'])
        
        # Rotation (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
        imgui.text("Rotation:")
        rotation_deg = [np.degrees(r) for r in transform['rotation']]
        changed, rotation_deg = imgui.input_float3("##rotation", *rotation_deg)
        if changed:
            transform['rotation'] = [np.radians(r) for r in rotation_deg]
            
        # Scale
        imgui.text("Scale:")
        changed, transform['scale'] = imgui.input_float3("##scale", *transform['scale'])
        
    def _render_type_specific_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞"""
        obj_type = self.active_object.obj_type
        
        if obj_type == ObjectType.LIGHT:
            self._render_light_properties()
        elif obj_type == ObjectType.CAMERA:
            self._render_camera_properties()
        elif obj_type == ObjectType.MESH:
            self._render_mesh_properties()
            
    def _render_light_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–≤–µ—Ç–∞"""
        if imgui.collapsing_header("Light", ):
            if 'light' not in self.active_object.properties:
                self.active_object.properties['light'] = {
                    'type': 'point',
                    'color': [1.0, 1.0, 1.0],
                    'intensity': 1.0,
                    'range': 10.0
                }
                
            light = self.active_object.properties['light']
            
            # –¢–∏–ø —Å–≤–µ—Ç–∞
            light_types = ['point', 'sun', 'spot', 'area']
            if imgui.begin_combo("Type", light['type']):
                for light_type in light_types:
                    clicked, selected = imgui.selectable(light_type, light_type == light['type'])
                    if clicked:
                        light['type'] = light_type
                imgui.end_combo()
                
            # –¶–≤–µ—Ç
            changed, light['color'] = imgui.color_edit3("Color", *light['color'])
            
            # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
            changed, light['intensity'] = imgui.slider_float("Intensity", light['intensity'], 0.0, 10.0)
            
            # –î–∞–ª—å–Ω–æ—Å—Ç—å
            changed, light['range'] = imgui.slider_float("Range", light['range'], 0.1, 100.0)
            
    def _render_camera_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∫–∞–º–µ—Ä—ã"""
        if imgui.collapsing_header("Camera", ):
            if 'camera' not in self.active_object.properties:
                self.active_object.properties['camera'] = {
                    'fov': 50.0,
                    'near_clip': 0.1,
                    'far_clip': 1000.0,
                    'type': 'perspective'
                }
                
            camera = self.active_object.properties['camera']
            
            # –¢–∏–ø –∫–∞–º–µ—Ä—ã
            camera_types = ['perspective', 'orthographic']
            if imgui.begin_combo("Type", camera['type']):
                for cam_type in camera_types:
                    clicked, selected = imgui.selectable(cam_type, cam_type == camera['type'])
                    if clicked:
                        camera['type'] = cam_type
                imgui.end_combo()
                
            # FOV (—Ç–æ–ª—å–∫–æ –¥–ª—è perspective)
            if camera['type'] == 'perspective':
                changed, camera['fov'] = imgui.slider_float("FOV", camera['fov'], 10.0, 120.0)
                
            # Clipping
            changed, camera['near_clip'] = imgui.input_float("Near Clip", camera['near_clip'])
            changed, camera['far_clip'] = imgui.input_float("Far Clip", camera['far_clip'])
            
    def _render_mesh_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –º–µ—à–∞"""
        if imgui.collapsing_header("Mesh", ):
            if 'mesh' not in self.active_object.properties:
                self.active_object.properties['mesh'] = {
                    'primitive_type': 'sphere',
                    'size': 1.0,
                    'subdivisions': 2
                }
                
            mesh = self.active_object.properties['mesh']
            
            # –¢–∏–ø –ø—Ä–∏–º–∏—Ç–∏–≤–∞
            primitives = ['sphere', 'cube', 'cylinder', 'torus', 'plane']
            if imgui.begin_combo("Primitive", mesh['primitive_type']):
                for primitive in primitives:
                    clicked, selected = imgui.selectable(primitive, primitive == mesh['primitive_type'])
                    if clicked:
                        mesh['primitive_type'] = primitive
                imgui.end_combo()
                
            # –†–∞–∑–º–µ—Ä
            changed, mesh['size'] = imgui.slider_float("Size", mesh['size'], 0.1, 10.0)
            
            # –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            changed, mesh['subdivisions'] = imgui.slider_int("Subdivisions", mesh['subdivisions'], 1, 6)
            
    def _render_modifier_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        imgui.text("Modifiers")
        imgui.separator()
        
        if not self.active_object:
            imgui.text("No object selected")
            return
            
        # TODO: Implement modifiers system
        imgui.text("Modifier system not implemented yet")
        
    def _render_material_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        imgui.text("Material Properties")
        imgui.separator()
        
        if not self.active_object:
            imgui.text("No object selected")
            return
            
        # TODO: Implement material system
        imgui.text("Material system not implemented yet")
        
    def _render_texture_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç—É—Ä"""
        imgui.text("Texture Properties")
        imgui.separator()
        
        # TODO: Implement texture system
        imgui.text("Texture system not implemented yet")
        
    def _render_physics_properties(self):
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ–∏–∑–∏–∫–∏"""
        imgui.text("Physics Properties")
        imgui.separator()
        
        # TODO: Implement physics system
        imgui.text("Physics system not implemented yet")
        
    def get_render_settings(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞"""
        return self.render_settings.copy()
        
    def get_scene_settings(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω—ã"""
        return self.scene_settings.copy()
        
    def get_world_settings(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏—Ä–∞"""
        return self.world_settings.copy()
